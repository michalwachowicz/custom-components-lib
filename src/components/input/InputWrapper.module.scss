@use "../../scss/abstracts/colors" as colors;
@use "../../scss/mixins/inner-reset" as *;

@mixin input {
  .input-wrapper > input:first-child,
  .input-wrapper > button:first-child {
    @content;
  }
}

@mixin label {
  [data-wrapper-label="true"] {
    @content;
  }
}

.input {
  @include inner-reset;

  & {
    box-sizing: border-box;
    position: relative;
  }

  @include input {
    position: relative;
    font-size: 1rem;
    color: #fff;
    border: none;
    background: none;
    width: 100%;
    height: 100%;
    min-height: 1.5rem;
    outline: none;
    z-index: 1;
  }

  @include label {
    position: absolute;
    top: 0;
    left: 0;
    color: colors.$white;
    transition: transform 0.3s ease;
    transform-origin: bottom left;
  }

  &-standard,
  &-filled {
    > .input-wrapper::after {
      content: "";
      position: absolute;
      display: block;
      width: 100%;
      height: 1px;
      background-color: colors.$white;
      bottom: 0;
      left: 0;
    }
  }

  &-filled,
  &-outlined {
    @include input {
      height: 2.90625rem;
    }
  }

  &:not(.input-focused):not(.input-error):hover > &-wrapper::after {
    background-color: #fff;
  }

  &-standard {
    @include input {
      padding: 0.25rem 0;
      margin-top: 1rem;
      height: 1.65625rem;
    }

    &:not(.input-not-empty) {
      @include label {
        transform: translateY(1.5rem);
      }
    }

    &.input-focused,
    &.input-not-empty {
      @include label {
        transform: translate(0, 0) scale(0.75);
      }
    }
  }

  &-filled {
    border-radius: 0.25rem 0.25rem 0 0;
    background-color: rgba(255, 255, 255, 0.09);

    @include input {
      padding: 1.5rem 0.75rem 0.25rem;
    }

    &:not(.input-focused):hover {
      background-color: rgba(255, 255, 255, 0.12);
    }

    &:not(.input-not-empty) {
      @include label {
        transform: translate(0.75rem, 1rem);
      }
    }

    &.input-focused,
    &.input-not-empty {
      @include label {
        transform: translate(0.75rem, 0.25rem) scale(0.75);
      }
    }
  }

  &-outlined {
    border: 1px solid colors.$white;
    border-radius: 0.25rem;

    @include input {
      padding: 0.875rem 1rem;
    }

    &:not(.input-not-empty) {
      @include label {
        transform: translate(0.875rem, 1rem);
      }
    }

    &.input-focused,
    &.input-not-empty {
      border: none;
      margin-bottom: 0.4rem;

      @include label {
        transform: translate(1.25rem, -0.75rem) scale(0.6);
      }
    }

    &:not(.input-error):hover {
      border-color: colors.$white;
    }

    &.input-focused {
      border-color: #fff;
    }

    &.input-error {
      border-color: colors.$error;
    }
  }

  &-focused {
    @include label {
      color: colors.$main;
    }

    &.input-error {
      @include label {
        color: colors.$error;
      }
    }

    > .input-wrapper::after {
      background-color: colors.$main;
      height: 2px;
    }

    &.input-error > .input-wrapper::after {
      background-color: colors.$error-active;
    }

    .input-fieldset {
      border-color: colors.$main;
    }
  }

  &-error {
    @include label {
      color: colors.$error;
    }

    .input-fieldset {
      border-color: colors.$error-active;
    }

    > .input-wrapper::after {
      background-color: colors.$error;
    }

    &-message {
      color: colors.$error;
      font-size: 0.75rem;
      margin-top: 0.25rem;
    }
  }

  &-container-filled &-error-message {
    margin-left: 0.75rem;
  }

  &-container-outlined &-error-message {
    margin-left: 1rem;
  }

  &-fieldset {
    position: absolute;
    top: -0.4rem;
    width: 100%;
    height: calc(100% + 0.5rem);
    border-radius: 0.25rem;
    border-color: colors.$white;
    border-width: 1px;
    padding: 0.875rem 1rem;

    &-legend {
      color: colors.$white;
      font-size: 0.75rem;
      opacity: 0;
    }
  }
}
