@use "sass:map";
@use "../../scss/mixins/entity" as entity;

.btn {
  $color: rgb(144, 202, 249);
  $darker: rgb(66, 165, 245);
  $disabled: rgba(255, 255, 255, 0.3);

  $button-sizes: (
    small: (
      font-size: 0.8125rem,
      padding: (
        text: 0.25rem 0.3125rem,
        outlined: 0.1875rem 0.5625rem,
        contained: 0.25rem 0.625rem,
      ),
    ),
    medium: (
      font-size: 0.875rem,
      padding: (
        text: 0.375rem 0.5rem,
        outlined: 0.3125rem 0.9375rem,
        contained: 0.375rem 1rem,
      ),
    ),
    large: (
      font-size: 0.9375rem,
      padding: (
        text: 0.5rem 0.6875rem,
        outlined: 0.4375rem 1.3125rem,
        contained: 0.5rem 1.375rem,
      ),
    ),
  );

  position: relative;
  border: none;
  background: none;
  text-transform: uppercase;
  font-weight: 500;
  font: inherit;
  overflow: hidden;

  &:not(:disabled) {
    cursor: pointer;
  }

  &,
  &-backdrop {
    border-radius: 0.25rem;
  }

  &-backdrop {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  &:not(:disabled):hover &-backdrop {
    background: rgba($color, 0.08);
  }

  &-outlined {
    border: 1px solid rgba($color, 0.5);

    &:disabled {
      border: 1px solid $disabled;
    }

    &:not(:disabled):hover {
      border: 1px solid $color;
    }
  }

  &-outlined,
  &-text {
    color: $color;
  }

  &:disabled {
    color: $disabled;
  }

  &-contained {
    color: rgba(0, 0, 0, 0.87);
    background-color: $color;

    &:hover {
      background-color: $darker;
    }

    &:disabled {
      background-color: rgba(255, 255, 255, 0.12);
    }

    & .btn-entity {
      @include entity.entity;
      background-color: rgba(0, 0, 0, 0.2);
    }
  }

  @each $size, $props in $button-sizes {
    &-#{$size} {
      font-size: map.get($props, font-size);

      @each $variant, $padding in map.get($props, padding) {
        &.btn-#{$variant} {
          padding: $padding;
        }
      }
    }
  }
}
